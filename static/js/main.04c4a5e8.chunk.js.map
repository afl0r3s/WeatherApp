{"version":3,"sources":["components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSearch","useState","city","setCity","onSubmit","e","preventDefault","name","type","placeholder","value","onChange","target","className","Nav","Card","min","max","img","onClose","id","onClick","src","width","height","alt","Cards","cities","map","c","App","setCities","ciudad","fetch","process","then","r","json","recurso","undefined","main","Math","round","temp_min","temp_max","weather","icon","wind","speed","temp","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","filter","require","config","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04c4a5e8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function SearchBar({onSearch}) {\r\n  const [city, setCity] = useState(\"\");\r\n  return (\r\n    <form onSubmit={(e) => {\r\n      e.preventDefault();\r\n      onSearch(city);\r\n      setCity('');\r\n    }}>\r\n      <input\r\n        name=\"busca\"\r\n        type=\"text\"\r\n        placeholder=\"Ciudad...\"\r\n        value={city}\r\n        onChange={e => setCity(e.target.value)}\r\n        className=\"busca\"\r\n      />\r\n      <input type=\"submit\" value=\"Agregar\" className=\"btnBusca\" />\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\n//import Logo from '../logoHenry.png';\r\nimport SearchBar from './SearchBar.jsx';\r\nimport './Nav.css';\r\n\r\nfunction Nav({ onSearch }) {\r\n\treturn (\r\n\t\t<div className=\"mainConent\">\r\n\t\t\t<div className=\"navBar\">\r\n\t\t\t\t<h1 data-text=\"Weather App\">Weather App</h1>\r\n\t\t\t  <SearchBar onSearch={onSearch} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default function Card ({min, max, name, img, onClose, id}) {\r\n    return (\r\n      <div className=\"card1\">\r\n        <div id=\"closeIcon\" className=\"row\">\r\n            <button onClick={onClose} className=\"btn btn-sm btn-danger\">X</button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{name}</h5>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <p>Min</p>\r\n              <p>{min}°</p>\r\n            </div>\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <p>Max</p>\r\n              <p>{max}°</p>\r\n            </div>\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <img className=\"iconoClima cardImg\" src={\"http://openweathermap.org/img/wn/\"+img+\"@2x.png\"} width=\"80\" height=\"80\" alt=\"\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './Cards.css';\r\n\r\nimport Card from './Card.jsx';\r\n\r\nexport default function Cards({cities, onClose}) {\r\n  if(cities){\r\n    return (\r\n      <div className='cards'>\r\n        {cities.map(c => <Card\r\n            key={c.id}\r\n            max={c.max}\r\n            min={c.min}\r\n            name={c.name}\r\n            img={c.img}\r\n            onClose={() => onClose(c.id)}\r\n            id={c.id}\r\n          /> )}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>Sin ciudades</div>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport Nav from './components/Nav';\r\nimport Cards from './components/Cards';\r\nimport './App.css';\r\nrequire('dotenv').config();\r\n\r\n\r\nexport default function App() {\r\n\tconst [cities, setCities] = useState([]);\r\n\t\r\n\r\n\tfunction onSearch(ciudad) {\r\n\t\tfetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n\t\t\t.then((r) => r.json())\r\n\t\t\t.then((recurso) => {\r\n\t\t\t\tif (recurso.main !== undefined) {\r\n\t\t\t\t\tconst ciudad = {\r\n\t\t\t\t\t\tmin: Math.round(recurso.main.temp_min),\r\n\t\t\t\t\t\tmax: Math.round(recurso.main.temp_max),\r\n\t\t\t\t\t\timg: recurso.weather[0].icon,\r\n\t\t\t\t\t\tid: recurso.id,\r\n\t\t\t\t\t\twind: recurso.wind.speed,\r\n\t\t\t\t\t\ttemp: recurso.main.temp,\r\n\t\t\t\t\t\tname: recurso.name,\r\n\t\t\t\t\t\tweather: recurso.weather[0].main,\r\n\t\t\t\t\t\tclouds: recurso.clouds.all,\r\n\t\t\t\t\t\tlatitud: recurso.coord.lat,\r\n\t\t\t\t\t\tlongitud: recurso.coord.lon,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tsetCities((oldCities) => [...oldCities, ciudad]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert('Ciudad no encontrada');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\r\n  }\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<span className=\"dev\">Developed by: Alejandro Flores</span>\r\n\t\t\t<Nav onSearch={onSearch} />\r\n\t\t\t<Cards cities={cities} onClose={onClose} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}